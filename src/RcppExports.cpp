// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// crossing_brownbridge
double crossing_brownbridge(double x0, double xt, double t, int ncross, double epsilon, bool up, bool counditional);
RcppExport SEXP BMIthreshCount_crossing_brownbridge(SEXP x0SEXP, SEXP xtSEXP, SEXP tSEXP, SEXP ncrossSEXP, SEXP epsilonSEXP, SEXP upSEXP, SEXP counditionalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type xt(xtSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type ncross(ncrossSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< bool >::type up(upSEXP);
    Rcpp::traits::input_parameter< bool >::type counditional(counditionalSEXP);
    rcpp_result_gen = Rcpp::wrap(crossing_brownbridge(x0, xt, t, ncross, epsilon, up, counditional));
    return rcpp_result_gen;
END_RCPP
}
// brown_crossing_sample
List brown_crossing_sample(double x0, double xt, double t, double epsilon, bool up, int nsize);
RcppExport SEXP BMIthreshCount_brown_crossing_sample(SEXP x0SEXP, SEXP xtSEXP, SEXP tSEXP, SEXP epsilonSEXP, SEXP upSEXP, SEXP nsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type xt(xtSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< bool >::type up(upSEXP);
    Rcpp::traits::input_parameter< int >::type nsize(nsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(brown_crossing_sample(x0, xt, t, epsilon, up, nsize));
    return rcpp_result_gen;
END_RCPP
}
// fills_in_cpp
int fills_in_cpp(arma::mat edge, arma::vec edgelength, int Nnode, arma::vec data, double epsilon, double thed, int cut, bool less);
RcppExport SEXP BMIthreshCount_fills_in_cpp(SEXP edgeSEXP, SEXP edgelengthSEXP, SEXP NnodeSEXP, SEXP dataSEXP, SEXP epsilonSEXP, SEXP thedSEXP, SEXP cutSEXP, SEXP lessSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type edge(edgeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type edgelength(edgelengthSEXP);
    Rcpp::traits::input_parameter< int >::type Nnode(NnodeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type thed(thedSEXP);
    Rcpp::traits::input_parameter< int >::type cut(cutSEXP);
    Rcpp::traits::input_parameter< bool >::type less(lessSEXP);
    rcpp_result_gen = Rcpp::wrap(fills_in_cpp(edge, edgelength, Nnode, data, epsilon, thed, cut, less));
    return rcpp_result_gen;
END_RCPP
}
// fills_in_mat
arma::vec fills_in_mat(arma::mat edge, arma::vec edgelength, int Nnode, arma::mat data, double epsilon, double thed, int cut, bool less);
RcppExport SEXP BMIthreshCount_fills_in_mat(SEXP edgeSEXP, SEXP edgelengthSEXP, SEXP NnodeSEXP, SEXP dataSEXP, SEXP epsilonSEXP, SEXP thedSEXP, SEXP cutSEXP, SEXP lessSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type edge(edgeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type edgelength(edgelengthSEXP);
    Rcpp::traits::input_parameter< int >::type Nnode(NnodeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type thed(thedSEXP);
    Rcpp::traits::input_parameter< int >::type cut(cutSEXP);
    Rcpp::traits::input_parameter< bool >::type less(lessSEXP);
    rcpp_result_gen = Rcpp::wrap(fills_in_mat(edge, edgelength, Nnode, data, epsilon, thed, cut, less));
    return rcpp_result_gen;
END_RCPP
}
// brown_tree_prior_node_cpp
arma::mat brown_tree_prior_node_cpp(arma::mat edge, arma::vec edgelength, int Nnode, arma::vec rootprior, int nsize);
RcppExport SEXP BMIthreshCount_brown_tree_prior_node_cpp(SEXP edgeSEXP, SEXP edgelengthSEXP, SEXP NnodeSEXP, SEXP rootpriorSEXP, SEXP nsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type edge(edgeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type edgelength(edgelengthSEXP);
    Rcpp::traits::input_parameter< int >::type Nnode(NnodeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rootprior(rootpriorSEXP);
    Rcpp::traits::input_parameter< int >::type nsize(nsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(brown_tree_prior_node_cpp(edge, edgelength, Nnode, rootprior, nsize));
    return rcpp_result_gen;
END_RCPP
}
// trnorm0
arma::vec trnorm0(double mu, double sigma, double d, double epsilon, int nsize);
RcppExport SEXP BMIthreshCount_trnorm0(SEXP muSEXP, SEXP sigmaSEXP, SEXP dSEXP, SEXP epsilonSEXP, SEXP nsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type nsize(nsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(trnorm0(mu, sigma, d, epsilon, nsize));
    return rcpp_result_gen;
END_RCPP
}
// getneighbor_cpp
arma::mat getneighbor_cpp(arma::mat edge, arma::vec edgelength, int Nnode);
RcppExport SEXP BMIthreshCount_getneighbor_cpp(SEXP edgeSEXP, SEXP edgelengthSEXP, SEXP NnodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type edge(edgeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type edgelength(edgelengthSEXP);
    Rcpp::traits::input_parameter< int >::type Nnode(NnodeSEXP);
    rcpp_result_gen = Rcpp::wrap(getneighbor_cpp(edge, edgelength, Nnode));
    return rcpp_result_gen;
END_RCPP
}
// posterior_update
arma::mat posterior_update(arma::mat edge, arma::vec edgelength, int Nnode, arma::vec d, double thed, double epsilon, arma::vec rootprior, int ngen, int burnin, int thin);
RcppExport SEXP BMIthreshCount_posterior_update(SEXP edgeSEXP, SEXP edgelengthSEXP, SEXP NnodeSEXP, SEXP dSEXP, SEXP thedSEXP, SEXP epsilonSEXP, SEXP rootpriorSEXP, SEXP ngenSEXP, SEXP burninSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type edge(edgeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type edgelength(edgelengthSEXP);
    Rcpp::traits::input_parameter< int >::type Nnode(NnodeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type thed(thedSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rootprior(rootpriorSEXP);
    Rcpp::traits::input_parameter< int >::type ngen(ngenSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(posterior_update(edge, edgelength, Nnode, d, thed, epsilon, rootprior, ngen, burnin, thin));
    return rcpp_result_gen;
END_RCPP
}
// twoStateRateMatrix
arma::mat twoStateRateMatrix(double lambda_01, double lambda_10);
RcppExport SEXP BMIthreshCount_twoStateRateMatrix(SEXP lambda_01SEXP, SEXP lambda_10SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda_01(lambda_01SEXP);
    Rcpp::traits::input_parameter< double >::type lambda_10(lambda_10SEXP);
    rcpp_result_gen = Rcpp::wrap(twoStateRateMatrix(lambda_01, lambda_10));
    return rcpp_result_gen;
END_RCPP
}
// TwoStatePhyloLikelihood1
double TwoStatePhyloLikelihood1(arma::Mat<int>& treeEdges, IntegerVector& tipStates, NumericVector& branchLengths, double lambda_01, double lambda_10, NumericVector& rootDist);
RcppExport SEXP BMIthreshCount_TwoStatePhyloLikelihood1(SEXP treeEdgesSEXP, SEXP tipStatesSEXP, SEXP branchLengthsSEXP, SEXP lambda_01SEXP, SEXP lambda_10SEXP, SEXP rootDistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type treeEdges(treeEdgesSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type tipStates(tipStatesSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type branchLengths(branchLengthsSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_01(lambda_01SEXP);
    Rcpp::traits::input_parameter< double >::type lambda_10(lambda_10SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type rootDist(rootDistSEXP);
    rcpp_result_gen = Rcpp::wrap(TwoStatePhyloLikelihood1(treeEdges, tipStates, branchLengths, lambda_01, lambda_10, rootDist));
    return rcpp_result_gen;
END_RCPP
}
// TwoStatePhyloLikelihood2
double TwoStatePhyloLikelihood2(const arma::Mat<int>& treeEdges, const IntegerVector& tipStates, const arma::vec& branchLengths, const double& lambda_01, const double& lambda_10, const arma::vec& armaRootDist);
RcppExport SEXP BMIthreshCount_TwoStatePhyloLikelihood2(SEXP treeEdgesSEXP, SEXP tipStatesSEXP, SEXP branchLengthsSEXP, SEXP lambda_01SEXP, SEXP lambda_10SEXP, SEXP armaRootDistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type treeEdges(treeEdgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tipStates(tipStatesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type branchLengths(branchLengthsSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda_01(lambda_01SEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda_10(lambda_10SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type armaRootDist(armaRootDistSEXP);
    rcpp_result_gen = Rcpp::wrap(TwoStatePhyloLikelihood2(treeEdges, tipStates, branchLengths, lambda_01, lambda_10, armaRootDist));
    return rcpp_result_gen;
END_RCPP
}
